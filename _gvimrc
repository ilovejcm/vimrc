set nocompatible
"source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction



if has("gui_running")
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
set guifont=Consolas:h12:cANSI
 
if has("win32")
set fileencoding=chinese
else
set fileencoding=utf-8
endif
 
let &termencoding=&encoding
 
" 解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
" 解决consle输出乱码
language messages zh_CN.utf-8
endif


"""""""""""""""""""""""""""""""SM"""""""""""""""""""""""""""""""""""""""""""""
"set fileencodings=utf-8
set ambiwidth=double

set expandtab
set shiftwidth=4

set smartindent    
set smarttab
set tabstop=4    
set softtabstop=4       
set backspace=2  
set textwidth=79 
set mouse=a
syntax on

filetype on

filetype indent plugin on

set ruler
set showcmd
let loaded_matchparen=1
set number
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

set modeline
set background=dark


set bsdir=buffer
set autochdir

set nobackup
set ignorecase
set hlsearch
set incsearch
set backspace=eol,start,indent
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,gb18030,cp936,gb2312,big5,euc-jp,euc-kr,latin1
set autoread

set ambiwidth=double
syntax on
set shortmess=atI
set showmatch
"""""""""""""""""""""""""""""""""""""TagList""""""""""""""""""""""""
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Ctags_Cmd='D:\ctags58\ctags.exe'
let Tlist_Use_Right_Window = 1
"set lcs=tab:\|\ ,extends:>,precedes:<
"set list
"""""""""""""""""""""""""""""""""""""python""""""""""""""""""""""""
"set filetype=python

"au BufNewFile,BufRead *.py,*.pyw setf python
map<F5> :w<CR>:!python %<CR>

autocmd FileType python set omnifunc=pythoncomplete#Complete
"""""""""""""""""""""""""""""""""""""MiniFufExplorer""""""""""""""""


let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1




"""""""""""""""""""""""Vundle""""""""""""""""""""""""""""""""
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=D:\Vim\vimfiles\bundle\Vundle.vim\
let path='D:\Vim\vimfiles\bundle'
call vundle#begin(path)
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
Plugin 'user/L9', {'name': 'newL9'}
"Plugin 'kevinw/pyflakes-vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/erdtree'
Plugin 'vim-scripts/taglist.vim'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'vim-scripts/Pydiction'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
execute pathogen#infect()
syntax enable
set background=dark
colorscheme solarized
let g:solarized_termcolors=256


""""""""""""""""""""""""NERDTree""""""""""""""""""""""""""""""""""
nmap<F3> :NERDTreeToggle<CR>

